package com.example.backlostandfound.controller;

import com.example.backlostandfound.model.LostItem;
import com.example.backlostandfound.repository.LostItemRepository;
import com.example.backlostandfound.service.GridFsService; // ‚úÖ Import GridFsService
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.xml.crypto.Data;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.List;

@RestController
@RequestMapping("/api/lost-items")
@CrossOrigin(origins = "http://localhost:3000")
public class LostItemController {

    @Autowired
    private LostItemRepository repository;

    @Autowired
    private GridFsService gridFsService; // ‚úÖ Inject GridFsService

    // üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏´‡∏≤‡∏¢
    @PostMapping
    public LostItem addLostItem(@RequestBody LostItem item) {
        return repository.save(item);
    }

    // üîπ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    @GetMapping
    public List<LostItem> getAllLostItems() {
        return repository.findAll();
    }

    // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡∏ï‡∏≤‡∏° ID
    @GetMapping("/{id}")
    public LostItem getLostItemById(@PathVariable String id) {
        return repository.findById(id)
                .orElseThrow(() -> new RuntimeException("Lost item not found"));
    }

    // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "removed"
    @GetMapping("/status/removed")
    public List<LostItem> getLostItemsByRemoved(
            @RequestParam(required = false) String date,
            @RequestParam(required = false) Integer locker)
        {

            if (date != null) {
                LocalDate localDate = LocalDate.parse(date.trim());
                LocalDateTime start = localDate.atStartOfDay();
                LocalDateTime end = localDate.plusDays(1).atStartOfDay();
                if (locker != null) {
                    return repository.findByStatusAndDateBetweenAndLocker("removed", start, end, locker);
                }
                return repository.findByStatusAndDateBetween("removed", start, end);
            }

            if (locker != null) {
                return repository.findByStatusAndLocker("removed", locker);
            }
            return repository.findByStatus("removed");
    }

    // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "stored"
    @GetMapping("/status/stored")
    public List<LostItem> getLostItemsByStored(
            @RequestParam(required = false) String date,
            @RequestParam(required = false) Integer locker)
    {

        if (date != null) {
                LocalDate localDate = LocalDate.parse(date.trim());
                LocalDateTime start = localDate.atStartOfDay();
                LocalDateTime end = localDate.plusDays(1).atStartOfDay();
                if (locker != null) {
                    return repository.findByStatusAndDateBetweenAndLocker("stored", start, end, locker);
                }
                return repository.findByStatusAndDateBetween("stored", start, end);
        }

        if (locker != null) {
            return repository.findByStatusAndLocker("stored", locker);
        }
        return repository.findByStatus("stored");
    }

    // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô "removed"
    @PutMapping(value = "/status/{id}", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public LostItem updateLostItemStatusWithFile(
            @PathVariable String id,
            @RequestPart("receiver") String receiver,
            @RequestPart("staffName") String staffName,
            @RequestPart(value = "identityDoc", required = false) MultipartFile identityDoc) {

        LostItem item = repository.findById(id)
                .orElseThrow(() -> new RuntimeException("Lost item not found"));

        item.setReceiver(receiver);
        item.setStaffName(staffName);
        item.setStatus("removed");

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö ‡πÉ‡∏´‡πâ upload ‡πÑ‡∏õ GridFS
        if (identityDoc != null && !identityDoc.isEmpty()) {
            try {
                String fileId = gridFsService.uploadFile(identityDoc);
                item.setIdentityDoc(fileId); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å File ID ‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå
            } catch (IOException e) {
                throw new RuntimeException("Failed to upload identity document", e);
            }
        }

        return repository.save(item);
    }

    // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡∏≤‡∏¢
    @PutMapping("/edit/{id}")
    public LostItem updateLostItem(@PathVariable String id, @RequestBody LostItem newItem) {
        LostItem item = repository.findById(id).orElseThrow(() -> new RuntimeException("Lost item not found"));

        item.setName(newItem.getName().toUpperCase());
        item.setCategory(newItem.getCategory());
        item.setPlace(newItem.getPlace());
        item.setDescription(newItem.getDescription());
        item.setNamereport(newItem.getNamereport());
        item.setLocker(newItem.getLocker());
        return repository.save(item);
    }

    // üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏° QRUrl
    @PutMapping("/QR/{id}")
    public LostItem AddQRURL(@PathVariable String id, @RequestBody LostItem newItem) {
        LostItem item = repository.findById(id).orElseThrow(() -> new RuntimeException("Lost item not found"));
        item.setId_qr(newItem.getId_qr());
        return repository.save(item);
    }

    // üîπ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DB
    @DeleteMapping("/delete/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void deleteLostItem(@PathVariable String id) {
        LostItem item = repository.findById(id)
                .orElseThrow(() -> new RuntimeException("Lost item not found"));

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å GridFS ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        if (item.getPicture() != null&& !item.getPicture().isEmpty()) {
            try {
                gridFsService.deleteFile(item.getPicture()); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å GridFS
            } catch (IOException e) {
                throw new RuntimeException("‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô GridFS ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", e);
            }
        }

        if (item.getIdentityDoc() != null && !item.getIdentityDoc().isEmpty()) {
            try {
                gridFsService.deleteFile(item.getIdentityDoc()); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å GridFS
            } catch (IOException e) {
                throw new RuntimeException("‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡πÉ‡∏ô GridFS ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", e);
            }
        }

        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LostItem ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        repository.delete(item);
    }



    // üîπ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á MongoDB GridFS
    @PostMapping(value = "/{id}/upload-image", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public String uploadImage(@PathVariable String id, @RequestParam("file") MultipartFile file) {
        try {
            String fileId = gridFsService.uploadFile(file); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ GridFS
            LostItem item = repository.findById(id).orElseThrow(() -> new RuntimeException("Lost item not found"));
            item.setPicture(fileId); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å GridFS ID ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô DB
            repository.save(item);
            return fileId;
        } catch (IOException e) {
            return "Upload failed: " + e.getMessage();
        }
    }

    // üîπ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å MongoDB GridFS
    @GetMapping("/{id}/image")
    public ResponseEntity<byte[]> getImage(@PathVariable String id) {
        LostItem item = repository.findById(id).orElseThrow(() -> new RuntimeException("Lost item not found"));
        if (item.getPicture() == null) {
            return ResponseEntity.notFound().build();
        }

        try {
            byte[] fileData = gridFsService.getFile(item.getPicture());
            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=\"" + item.getPicture() + "\"")
                    .contentType(MediaType.IMAGE_JPEG) // ‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
                    .body(fileData);
        } catch (IOException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping("/{id}/identityDoc")
    public ResponseEntity<byte[]> getIdentityDoc(@PathVariable String id) {
        LostItem item = repository.findById(id)
                .orElseThrow(() -> new RuntimeException("Lost item not found"));

        if (item.getIdentityDoc() == null) {
            return ResponseEntity.notFound().build();
        }
        try {
            byte[] fileData = gridFsService.getFile(item.getIdentityDoc());
            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=\"" + item.getIdentityDoc() + "\"")
                    .contentType(MediaType.IMAGE_JPEG)
                    .body(fileData);
        } catch (IOException e) {
            return ResponseEntity.badRequest().build();
        }
    }

}
